{
  "$ref": "#/definitions/Binary",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "ABI": {
      "enum": [
        "Invalid",
        "SystemV_x86_64"
      ],
      "title": "ABI"
    },
    "Architecture": {
      "enum": [
        "Invalid",
        "x86",
        "x86_64",
        "arm",
        "aarch64",
        "mips",
        "mipsel",
        "systemz"
      ],
      "title": "Architecture"
    },
    "Argument": {
      "additionalProperties": false,
      "description": "The argument of a function type. It features an argument index (the key), a\ntype and an optional name\n",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "Index": {
          "type": "integer"
        },
        "OriginalName": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/QualifiedType"
        }
      },
      "required": [
        "Index",
        "Type"
      ],
      "title": "Argument",
      "type": "object"
    },
    "BasicBlock": {
      "additionalProperties": false,
      "description": "The basic block of a function",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "End": {
          "$ref": "#/definitions/MetaAddress"
        },
        "Start": {
          "$ref": "#/definitions/MetaAddress"
        },
        "Successors": {
          "items": {
            "$ref": "#/definitions/FunctionEdgeBase"
          },
          "type": "array"
        }
      },
      "required": [
        "Start",
        "End",
        "Successors"
      ],
      "title": "BasicBlock",
      "type": "object"
    },
    "Binary": {
      "additionalProperties": false,
      "description": "Data structure representing the whole binary",
      "properties": {
        "Architecture": {
          "$ref": "#/definitions/Architecture"
        },
        "EntryPoint": {
          "$ref": "#/definitions/MetaAddress"
        },
        "Functions": {
          "items": {
            "$ref": "#/definitions/Function"
          },
          "type": "array"
        },
        "ImportedDynamicFunctions": {
          "items": {
            "$ref": "#/definitions/DynamicFunction"
          },
          "type": "array"
        },
        "ImportedLibraries": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Segments": {
          "items": {
            "$ref": "#/definitions/Segment"
          },
          "type": "array"
        },
        "Types": {
          "items": {
            "$ref": "#/definitions/Type"
          },
          "type": "array"
        }
      },
      "required": [
        "Functions",
        "ImportedDynamicFunctions",
        "Architecture",
        "Segments",
        "EntryPoint",
        "Types"
      ],
      "title": "Binary",
      "type": "object"
    },
    "CABIFunctionType": {
      "additionalProperties": false,
      "description": "The function type described through a C-like prototype plus an ABI.\n\nThis is an \"high level\" representation of the prototype of a function. It is\nexpressed as list of arguments composed by an index and a type. No\ninformation about the register is embedded. That information is implicit in\nthe ABI this type is associated to.\n",
      "properties": {
        "ABI": {
          "$ref": "#/definitions/ABI"
        },
        "Arguments": {
          "items": {
            "$ref": "#/definitions/Argument"
          },
          "type": "array"
        },
        "CustomName": {
          "type": "string"
        },
        "ID": {
          "type": "integer"
        },
        "Kind": {
          "$ref": "#/definitions/TypeKind"
        },
        "OriginalName": {
          "type": "string"
        },
        "ReturnType": {
          "$ref": "#/definitions/QualifiedType"
        }
      },
      "required": [
        "Kind",
        "ID",
        "ABI",
        "ReturnType",
        "Arguments"
      ],
      "title": "CABIFunctionType",
      "type": "object"
    },
    "CallEdge": {
      "additionalProperties": false,
      "description": "A CFG edge to represent function calls (direct, indirect and tail calls)",
      "properties": {
        "Attributes": {
          "items": {
            "$ref": "#/definitions/FunctionAttribute"
          },
          "type": "array"
        },
        "Destination": {
          "$ref": "#/definitions/MetaAddress"
        },
        "DynamicFunction": {
          "type": "string"
        },
        "Prototype": {
          "$ref": "#/definitions/Typeref"
        },
        "Type": {
          "$ref": "#/definitions/FunctionEdgeType"
        }
      },
      "required": [
        "Destination",
        "Type",
        "Prototype"
      ],
      "title": "CallEdge",
      "type": "object"
    },
    "DynamicFunction": {
      "additionalProperties": false,
      "description": "Function defined in a dynamic library",
      "properties": {
        "Attributes": {
          "items": {
            "$ref": "#/definitions/FunctionAttribute"
          },
          "type": "array"
        },
        "CustomName": {
          "type": "string"
        },
        "OriginalName": {
          "type": "string"
        },
        "Prototype": {
          "$ref": "#/definitions/Typeref"
        }
      },
      "required": [
        "OriginalName",
        "Prototype"
      ],
      "title": "DynamicFunction",
      "type": "object"
    },
    "Enum": {
      "additionalProperties": false,
      "description": "An enum type in model. Enums are actually typedefs of unnamed enums.",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "Entries": {
          "items": {
            "$ref": "#/definitions/EnumEntry"
          },
          "type": "array"
        },
        "ID": {
          "type": "integer"
        },
        "Kind": {
          "$ref": "#/definitions/TypeKind"
        },
        "OriginalName": {
          "type": "string"
        },
        "UnderlyingType": {
          "$ref": "#/definitions/Typeref"
        }
      },
      "required": [
        "Kind",
        "ID",
        "UnderlyingType",
        "Entries"
      ],
      "title": "Enum",
      "type": "object"
    },
    "EnumEntry": {
      "additionalProperties": false,
      "description": "An entry in a model enum, with a name and a value",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "OriginalName": {
          "type": "string"
        },
        "Value": {
          "type": "integer"
        }
      },
      "required": [
        "Value"
      ],
      "title": "EnumEntry",
      "type": "object"
    },
    "Function": {
      "additionalProperties": false,
      "description": "A function",
      "properties": {
        "Attributes": {
          "items": {
            "$ref": "#/definitions/FunctionAttribute"
          },
          "type": "array"
        },
        "CFG": {
          "items": {
            "$ref": "#/definitions/BasicBlock"
          },
          "type": "array"
        },
        "CustomName": {
          "type": "string"
        },
        "Entry": {
          "$ref": "#/definitions/MetaAddress"
        },
        "OriginalName": {
          "type": "string"
        },
        "Prototype": {
          "$ref": "#/definitions/Typeref"
        },
        "StackFrameType": {
          "$ref": "#/definitions/Typeref"
        },
        "Type": {
          "$ref": "#/definitions/FunctionType"
        }
      },
      "required": [
        "Entry",
        "Type"
      ],
      "title": "Function",
      "type": "object"
    },
    "FunctionAttribute": {
      "description": "Attributes for functions. Can be applied both to functions and call sites.\n",
      "enum": [
        "Invalid",
        "NoReturn"
      ],
      "title": "FunctionAttribute"
    },
    "FunctionEdge": {
      "additionalProperties": false,
      "description": "An edge on the CFG",
      "properties": {
        "Destination": {
          "$ref": "#/definitions/MetaAddress"
        },
        "Type": {
          "$ref": "#/definitions/FunctionEdgeType"
        }
      },
      "required": [
        "Destination",
        "Type"
      ],
      "title": "FunctionEdge",
      "type": "object"
    },
    "FunctionEdgeBase": {
      "additionalProperties": false,
      "description": "An edge on the CFG",
      "oneOf": [
        {
          "$ref": "#/definitions/FunctionEdge"
        },
        {
          "$ref": "#/definitions/CallEdge"
        }
      ],
      "title": "FunctionEdgeBase",
      "type": "object"
    },
    "FunctionEdgeType": {
      "description": "Type of edge on the CFG",
      "enum": [
        "Invalid",
        "DirectBranch",
        "FakeFunctionCall",
        "FakeFunctionReturn",
        "FunctionCall",
        "IndirectCall",
        "Return",
        "BrokenReturn",
        "IndirectTailCall",
        "LongJmp",
        "Killer",
        "Unreachable"
      ],
      "title": "FunctionEdgeType"
    },
    "FunctionType": {
      "enum": [
        "Invalid",
        "Regular",
        "NoReturn",
        "Fake"
      ],
      "title": "FunctionType"
    },
    "MetaAddress": {
      "type": "string"
    },
    "NamedTypedRegister": {
      "additionalProperties": false,
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "Location": {
          "$ref": "#/definitions/Register"
        },
        "Type": {
          "$ref": "#/definitions/QualifiedType"
        }
      },
      "required": [
        "Location",
        "Type"
      ],
      "title": "NamedTypedRegister",
      "type": "object"
    },
    "Primitive": {
      "additionalProperties": false,
      "description": "A primitive type in model: sized integers, booleans, floats and void",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "ID": {
          "type": "integer"
        },
        "Kind": {
          "$ref": "#/definitions/TypeKind"
        },
        "OriginalName": {
          "type": "string"
        },
        "PrimitiveKind": {
          "$ref": "#/definitions/PrimitiveTypeKind"
        },
        "Size": {
          "type": "integer"
        }
      },
      "required": [
        "Kind",
        "ID",
        "PrimitiveKind",
        "Size"
      ],
      "title": "Primitive",
      "type": "object"
    },
    "PrimitiveTypeKind": {
      "enum": [
        "Invalid",
        "Void",
        "Generic",
        "PointerOrNumber",
        "Number",
        "Unsigned",
        "Signed",
        "Float"
      ],
      "title": "PrimitiveTypeKind"
    },
    "QualifiedType": {
      "additionalProperties": false,
      "description": "A qualified version of a model::Type. Can have many nested qualifiers",
      "properties": {
        "Qualifiers": {
          "items": {
            "$ref": "#/definitions/Qualifier"
          },
          "type": "array"
        },
        "UnqualifiedType": {
          "$ref": "#/definitions/Typeref"
        }
      },
      "required": [
        "UnqualifiedType"
      ],
      "title": "QualifiedType",
      "type": "object"
    },
    "Qualifier": {
      "additionalProperties": false,
      "description": "A qualifier for a model::Type",
      "properties": {
        "Kind": {
          "$ref": "#/definitions/QualifierKind"
        },
        "Size": {
          "type": "integer"
        }
      },
      "required": [
        "Kind"
      ],
      "title": "Qualifier",
      "type": "object"
    },
    "QualifierKind": {
      "description": "Enum for identifying different kinds of qualifiers\n\nNotice that we are choosing to represent pointers and arrays as qualifiers.\nThe idea is that a qualifier is something that you can add to a type T to\nobtain another type R, in such a way that if T is fully known also R is fully\nknown. In this sense Pointer and Array types are qualified types.\n",
      "enum": [
        "Invalid",
        "Pointer",
        "Array",
        "Const"
      ],
      "title": "QualifierKind"
    },
    "RawFunctionType": {
      "additionalProperties": false,
      "properties": {
        "Arguments": {
          "items": {
            "$ref": "#/definitions/NamedTypedRegister"
          },
          "type": "array"
        },
        "CustomName": {
          "type": "string"
        },
        "FinalStackOffset": {
          "type": "integer"
        },
        "ID": {
          "type": "string"
        },
        "Kind": {
          "$ref": "#/definitions/TypeKind"
        },
        "OriginalName": {
          "type": "string"
        },
        "PreservedRegisters": {
          "items": {
            "$ref": "#/definitions/Register"
          },
          "type": "array"
        },
        "ReturnValues": {
          "items": {
            "$ref": "#/definitions/TypedRegister"
          },
          "type": "array"
        },
        "StackArgumentsType": {
          "$ref": "#/definitions/Typeref"
        }
      },
      "required": [
        "Kind",
        "ID",
        "Arguments",
        "ReturnValues",
        "PreservedRegisters",
        "FinalStackOffset"
      ],
      "title": "RawFunctionType",
      "type": "object"
    },
    "Register": {
      "enum": [
        "Invalid",
        "eax_x86",
        "ebx_x86",
        "ecx_x86",
        "edx_x86",
        "esi_x86",
        "edi_x86",
        "ebp_x86",
        "esp_x86",
        "rax_x86_64",
        "rbx_x86_64",
        "rcx_x86_64",
        "rdx_x86_64",
        "rbp_x86_64",
        "rsp_x86_64",
        "rsi_x86_64",
        "rdi_x86_64",
        "r8_x86_64",
        "r9_x86_64",
        "r10_x86_64",
        "r11_x86_64",
        "r12_x86_64",
        "r13_x86_64",
        "r14_x86_64",
        "r15_x86_64",
        "xmm0_x86_64",
        "xmm1_x86_64",
        "xmm2_x86_64",
        "xmm3_x86_64",
        "xmm4_x86_64",
        "xmm5_x86_64",
        "xmm6_x86_64",
        "xmm7_x86_64",
        "r0_arm",
        "r1_arm",
        "r2_arm",
        "r3_arm",
        "r4_arm",
        "r5_arm",
        "r6_arm",
        "r7_arm",
        "r8_arm",
        "r9_arm",
        "r10_arm",
        "r11_arm",
        "r12_arm",
        "r13_arm",
        "r14_arm",
        "x0_aarch64",
        "x1_aarch64",
        "x2_aarch64",
        "x3_aarch64",
        "x4_aarch64",
        "x5_aarch64",
        "x6_aarch64",
        "x7_aarch64",
        "x8_aarch64",
        "x9_aarch64",
        "x10_aarch64",
        "x11_aarch64",
        "x12_aarch64",
        "x13_aarch64",
        "x14_aarch64",
        "x15_aarch64",
        "x16_aarch64",
        "x17_aarch64",
        "x18_aarch64",
        "x19_aarch64",
        "x20_aarch64",
        "x21_aarch64",
        "x22_aarch64",
        "x23_aarch64",
        "x24_aarch64",
        "x25_aarch64",
        "x26_aarch64",
        "x27_aarch64",
        "x28_aarch64",
        "x29_aarch64",
        "lr_aarch64",
        "sp_aarch64",
        "v0_mips",
        "v1_mips",
        "a0_mips",
        "a1_mips",
        "a2_mips",
        "a3_mips",
        "s0_mips",
        "s1_mips",
        "s2_mips",
        "s3_mips",
        "s4_mips",
        "s5_mips",
        "s6_mips",
        "s7_mips",
        "gp_mips",
        "sp_mips",
        "fp_mips",
        "ra_mips",
        "r0_systemz",
        "r1_systemz",
        "r2_systemz",
        "r3_systemz",
        "r4_systemz",
        "r5_systemz",
        "r6_systemz",
        "r7_systemz",
        "r8_systemz",
        "r9_systemz",
        "r10_systemz",
        "r11_systemz",
        "r12_systemz",
        "r13_systemz",
        "r14_systemz",
        "r15_systemz",
        "f0_systemz",
        "f1_systemz",
        "f2_systemz",
        "f3_systemz",
        "f4_systemz",
        "f5_systemz",
        "f6_systemz",
        "f7_systemz",
        "f8_systemz",
        "f9_systemz",
        "f10_systemz",
        "f11_systemz",
        "f12_systemz",
        "f13_systemz",
        "f14_systemz",
        "f15_systemz"
      ],
      "title": "Register"
    },
    "RegisterState": {
      "enum": [
        "Invalid",
        "No",
        "NoOrDead",
        "Dead",
        "Yes",
        "YesOrDead",
        "Maybe",
        "Contradiction"
      ],
      "title": "RegisterState"
    },
    "Segment": {
      "additionalProperties": false,
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "EndAddress": {
          "$ref": "#/definitions/MetaAddress"
        },
        "EndOffset": {
          "type": "integer"
        },
        "IsExecutable": {
          "type": "boolean"
        },
        "IsReadable": {
          "type": "boolean"
        },
        "IsWriteable": {
          "type": "boolean"
        },
        "StartAddress": {
          "$ref": "#/definitions/MetaAddress"
        },
        "StartOffset": {
          "type": "integer"
        }
      },
      "required": [
        "StartAddress",
        "EndAddress",
        "StartOffset",
        "EndOffset",
        "IsReadable",
        "IsWriteable",
        "IsExecutable"
      ],
      "title": "Segment",
      "type": "object"
    },
    "Struct": {
      "additionalProperties": false,
      "description": "A struct type in model.\nStructs are actually typedefs of unnamed structs in C.\n",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "Fields": {
          "items": {
            "$ref": "#/definitions/StructField"
          },
          "type": "array"
        },
        "ID": {
          "type": "integer"
        },
        "Kind": {
          "$ref": "#/definitions/TypeKind"
        },
        "OriginalName": {
          "type": "string"
        },
        "Size": {
          "type": "integer"
        }
      },
      "required": [
        "Kind",
        "ID",
        "Fields",
        "Size"
      ],
      "title": "Struct",
      "type": "object"
    },
    "StructField": {
      "additionalProperties": false,
      "description": "A field of a struct type in model, with offset, qualified type, and name",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "Offset": {
          "type": "integer"
        },
        "OriginalName": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/QualifiedType"
        }
      },
      "required": [
        "Offset",
        "Type"
      ],
      "title": "StructField",
      "type": "object"
    },
    "Type": {
      "additionalProperties": false,
      "description": "Base class of model types used for LLVM-style RTTI",
      "oneOf": [
        {
          "$ref": "#/definitions/Enum"
        },
        {
          "$ref": "#/definitions/Primitive"
        },
        {
          "$ref": "#/definitions/CABIFunctionType"
        },
        {
          "$ref": "#/definitions/Union"
        },
        {
          "$ref": "#/definitions/RawFunctionType"
        },
        {
          "$ref": "#/definitions/Typedef"
        },
        {
          "$ref": "#/definitions/Struct"
        }
      ],
      "title": "Type",
      "type": "object"
    },
    "TypeKind": {
      "description": "Enum for identifying different kind of model types",
      "enum": [
        "Invalid",
        "Primitive",
        "Enum",
        "Typedef",
        "Struct",
        "Union",
        "CABIFunctionType",
        "RawFunctionType"
      ],
      "title": "TypeKind"
    },
    "TypedRegister": {
      "additionalProperties": false,
      "properties": {
        "Location": {
          "$ref": "#/definitions/Register"
        },
        "Type": {
          "$ref": "#/definitions/QualifiedType"
        }
      },
      "required": [
        "Location",
        "Type"
      ],
      "title": "TypedRegister",
      "type": "object"
    },
    "Typedef": {
      "additionalProperties": false,
      "description": "A typedef type in model",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "ID": {
          "type": "integer"
        },
        "Kind": {
          "$ref": "#/definitions/TypeKind"
        },
        "OriginalName": {
          "type": "string"
        },
        "UnderlyingType": {
          "$ref": "#/definitions/QualifiedType"
        }
      },
      "required": [
        "Kind",
        "ID",
        "UnderlyingType"
      ],
      "title": "Typedef",
      "type": "object"
    },
    "Typeref": {
      "type": "string"
    },
    "Union": {
      "additionalProperties": false,
      "description": "A union type in model.\nUnions are actually typedefs of unnamed unions in C.\n",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "Fields": {
          "items": {
            "$ref": "#/definitions/UnionField"
          },
          "type": "array"
        },
        "ID": {
          "type": "integer"
        },
        "Kind": {
          "$ref": "#/definitions/TypeKind"
        },
        "OriginalName": {
          "type": "string"
        }
      },
      "required": [
        "Kind",
        "ID",
        "Fields"
      ],
      "title": "Union",
      "type": "object"
    },
    "UnionField": {
      "additionalProperties": false,
      "description": "A field of a union type in model, with position, qualified type, and name",
      "properties": {
        "CustomName": {
          "type": "string"
        },
        "Index": {
          "type": "integer"
        },
        "OriginalName": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/QualifiedType"
        }
      },
      "required": [
        "Index",
        "Type"
      ],
      "title": "UnionField",
      "type": "object"
    }
  }
}
